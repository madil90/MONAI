name: docker
# versioning: compute a static version file
# local_docker: use the version file to build docker images
# docker_test_latest: test the latest internal docker image (has flake)
# docker_test_dockerhub: test the latest dockerhub release (no flake)
on:
  # dev only docker deployment and quick tests
  push:
    branches:
      - dev
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  versioning:
    # compute versioning file from python setup.py
    # upload as artifact
    # (also used in release.yml)
    if: github.repository == 'Project-MONAI/MONAI'
    container:
      image: localhost:5000/local_monai:latest
    runs-on: [self-hosted, linux, x64, build_only]
    steps:
      - uses: actions/checkout@v2
        # full history so that we can git describe
        with:
          ref: dev
          fetch-depth: 0
      - shell: bash
        run: |
          git describe
          python setup.py build
          cat build/lib/monai/_version.py
      - name: Upload version
        uses: actions/upload-artifact@v2
        with:
          name: _version.py
          path: build/lib/monai/_version.py
      - name: Clean up directory
        shell: bash
        run: |
          ls -al
          rm -rf {*,.[^.]*}

  local_docker:
    # builds two versions: local_monai:latest and local_monai:dockerhub
    # latest: used for local tests
    # dockerhub: release, no flake package
    if: github.repository == 'Project-MONAI/MONAI'
    needs: versioning
    runs-on: [self-hosted, linux, x64, build_only]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: dev
    - name: Download version
      uses: actions/download-artifact@v2
      with:
        name: _version.py
    - name: docker_build
      shell: bash
      run: |
        # get tag info for versioning
        cat _version.py
        mv _version.py monai/
        # build and run original docker image for local registry
        docker build -t localhost:5000/local_monai:latest -f Dockerfile .
        docker push localhost:5000/local_monai:latest
        # build once more w/ tag "latest": remove flake package as it is not needed on hub.docker.com
        sed -i '/flake/d' requirements-dev.txt
        docker build -t projectmonai/monai:latest -f Dockerfile .
        # also push as tag "dockerhub" to local registry
        docker image tag projectmonai/monai:latest localhost:5000/local_monai:dockerhub
        docker push localhost:5000/local_monai:dockerhub
        # distribute as always w/ tag "latest" to hub.docker.com
        echo "${{ secrets.DOCKER_PW }}" | docker login -u projectmonai --password-stdin
        docker push projectmonai/monai:latest
        docker logout
        docker image prune -f

  docker_test_latest:
    if: github.repository == 'Project-MONAI/MONAI'
    needs: local_docker
    container:
      image: localhost:5000/local_monai:latest
    runs-on: [self-hosted, linux, x64, common]
    steps:
    - name: Import
      run: |
        export CUDA_VISIBLE_DEVICES=$(python -m tests.utils)
        echo $CUDA_VISIBLE_DEVICES
        trap 'if pgrep python; then pkill python; fi;' ERR
        python -c $'import torch\na,b=torch.zeros(1,device="cuda:0"),torch.zeros(1,device="cuda:1");\nwhile True:print(a,b)' > /dev/null &
        python -c 'import monai; monai.config.print_config()'
        cd /opt/monai
        ls -al
        ngc --version
        python -m tests.min_tests
        if pgrep python; then pkill python; fi
      env:
        QUICKTEST: True

  docker_test_dockerhub:
    if: github.repository == 'Project-MONAI/MONAI'
    needs: local_docker
    container:
      image: localhost:5000/local_monai:dockerhub
    runs-on: [self-hosted, linux, x64, common]
    steps:
    - name: Import
      run: |
        export CUDA_VISIBLE_DEVICES=$(python -m tests.utils)
        echo $CUDA_VISIBLE_DEVICES
        trap 'if pgrep python; then pkill python; fi;' ERR
        python -c $'import torch\na,b=torch.zeros(1,device="cuda:0"),torch.zeros(1,device="cuda:1");\nwhile True:print(a,b)' > /dev/null &
        python -c 'import monai; monai.config.print_config()'
        cd /opt/monai
        ls -al
        ngc --version
        python -m tests.min_tests
        if pgrep python; then pkill python; fi
      env:
        QUICKTEST: True
